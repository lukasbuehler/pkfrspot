rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /spots/{spotId}
    {
      // all the spots are visible to everyone, authenticated or not
      allow read: if true;

      // TODO: In the future there should be a voting feature for changes on spots.
      // for now every authenticated user can write for every spot.
      allow write: if request.auth.uid != null &&
        (resource == null || resource.data == null ?
           !request.resource.data.keys().hasAny(['rating', 'num_reviews', 'rating_histogram', 'highlighted_reviews']) :
           !request.resource.data.diff(resource.data).affectedKeys().hasAny(['rating', 'num_reviews', 'rating_histogram', 'highlighted_reviews']))

      match /reviews/{userId} {
        allow read: if true;
        allow create: if request.auth.uid != null 
          && request.auth.uid == userId
          && request.auth.uid == request.resource.data.user.uid
          && !exists(/databases/$(database)/documents/spots/$(spotId)/reviews/$(userId))
          && request.resource.data.rating is int 
          && request.resource.data.rating >= 1 
          && request.resource.data.rating <= 5;
        allow update: if request.auth.uid != null
          && request.auth.uid == request.resource.data.user.uid
          && request.auth.uid == userId
          && request.resource.data.rating is int 
          && request.resource.data.rating >= 1 
          && request.resource.data.rating <= 5;
        allow delete: if request.auth.uid != null
          && request.auth.uid == request.resource.data.user.uid
          && request.auth.uid == userId;
      }

      // Spot Reports
      match /reports/{reportId}
      {
        // Only allow to read and create if the report is from the same user.
        // Disallow altering and viewing other users reports.
        allow read: if true;
        allow create: if request.auth.uid != null 
          && request.auth.uid == request.resource.data.user.uid;
        allow update, delete: if false;
      }

      // Spot Challenges
      match /challenges/{challengeId}
      {
        allow read: if true;
        allow write: if request.auth.uid != null 
          && request.auth.uid == request.resource.data.user.uid;
      }
    }

    match /spot_clusters/{cluster}
    {
        allow read: if true;
        allow write: if false;
    }

    match /spot_slugs/{slug} {
      allow read: if true;

      allow create: if request.auth.uid != null
        && slug.matches('^[a-z0-9-]+$')
        && !exists(/databases/$(database)/documents/spot_slugs/$(slug))
        && exists(/databases/$(database)/documents/spots/$(request.resource.data.spot_id));

      allow update, delete: if false;
    }

    match /event_slugs/{slug} {
      allow read: if true;

      allow create: if request.auth.uid != null
        && slug.matches('^[a-z0-9-]+$')
        && !exists(/databases/$(database)/documents/event_slugs/$(slug))
        && exists(/databases/$(database)/documents/events/$(request.resource.data.event_id));

      allow update, delete: if false;
    }

    match /posts/{post}
    {
      // every post is publicy available to everyone.
      allow read: if true;

      // only authenticated users can create and edit posts and only create and edit it if it's their post. Also, they can't set the like_count variable.
      allow create, update: if request.auth.uid != null 
        && request.auth.uid == request.resource.data.user.uid
        && !('like_count' in request.resource.data);
      allow delete: if request.auth.uid != null 
        && request.auth.uid == resource.data.user.uid;

      // match the subcollection likes
      match /likes/{userId} {
        // Only authenticated users can view who liked a post
        allow read: if request.auth.uid != null;

        // Only you can edit your like
        allow create, update: if request.auth.uid == userId
          && request.auth.uid == request.resource.data.user.uid;
        allow delete: if request.auth.uid == userId
          && request.auth.uid == resource.data.user.uid;
      }
    }
    
    match /users/{userId} 
    {
      // all users and their profiles are currently public
      allow read: if true;
      // It is not allowed to update the follower_count. This is handled by a cloud function.
      allow create, update: if request.auth.uid != null && request.auth.uid == userId
         && !('follower_count' in request.resource.data);

      match /following/{otherUserId} {
        // A user can only see and update his own following
        allow read: if request.auth.uid != null && request.auth.uid == userId;
        allow write: if request.auth.uid != null 
        && request.auth.uid == userId && request.auth.uid != otherUserId; 
      }
      match /followers/{otherUserId} {
        // A user can only see his own followers
        allow read: if request.auth.uid != null && request.auth.uid == userId;
        // TODO write cloud function to handle updating followers and remove this permission to write.
        allow write: if request.auth.uid != null && 
        request.auth.uid == otherUserId && request.auth.uid != userId;
      }
    }

    match /events/{eventId} {
      allow read: if true;
      allow write: if false;
    }
  }
}